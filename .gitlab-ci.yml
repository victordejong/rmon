---

stages:
- lint
- test
- build
- publish
- release

.rust-check:
  stage: lint
  image: rust
  before_script:
    - apt update
    - apt install protobuf-compiler -y

.rust-build:
  stage: build
  image: rust
  before_script:
    - apt update
    - apt install protobuf-compiler -y
  artifacts:
    untracked: false
    when: on_success
    access: 'developer'
    expire_in: "30 days"

yamllint:
  stage: lint
  image:
    name: cytopia/yamllint
    entrypoint: ["/bin/ash", "-c"]
  script:
    - cd ansible
    - yamllint -f colored .

ansible-lint:
  stage: lint
  image: registry.gitlab.com/pipeline-components/ansible-lint:latest
  script:
    - cd ansible
    - ansible-lint

shellcheck:
  stage: lint
  image: koalaman/shellcheck-alpine
  script:
    - find . -name "*.sh" -type f | xargs shellcheck

rust-check:client:
  extends: .rust-check
  script:
    - cd client/
    - cargo check

rust-check:server:
  extends: .rust-check
  script:
    - cd server/
    - cargo check

ansible-test:
  stage: test
  image: docker
  services:
    - docker:dind
  before_script:
    - docker info
    - apk update
    - apk add python3 py3-virtualenv bash git rsync
  script:
    - cd ansible
    - bash test.sh
  # rules:
  #   - changes:
  #     - ansible/**/*

rust-build:client:
  extends: .rust-build
  script:
    - cd client/
    - cargo build --release
  artifacts:
    paths:
      - client/target/release/
  rules:
    - changes:
      - client/**/*

rust-build:server:
  extends: .rust-build
  script:
    - cd server/
    - cargo build --release
  artifacts:
    paths:
      - server/target/release/
  rules:
    - changes:
      - server/**/*

publish-artifacts:client:
  stage: publish
  needs:
    - job: rust-build:client
      artifacts: true
  image: curlimages/curl
  rules:
    - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually
  script:
    - |
      curl --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
           --upload-file client/target/release/rmon-client \
           "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/rmon/${CI_COMMIT_TAG}/rmon-client"

publish-artifacts:server:
  stage: publish
  needs:
    - job: rust-build:server
      artifacts: true
  image: curlimages/curl
  rules:
    - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually
  script:
    - |
      curl --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
           --upload-file server/target/release/rmon-server \
           "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/rmon/${CI_COMMIT_TAG}/rmon-server"

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually
  script:
    - echo "Running the release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: 'Release created using the release-cli.'
    assets:
      links:
        - name: 'rmon-client'
          filepath: /releases/rmon-client
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/rmon/${CI_COMMIT_TAG}/rmon-client"
        - name: 'rmon-server'
          filepath: /releases/rmon-server
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/rmon/${CI_COMMIT_TAG}/rmon-server"

sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml
